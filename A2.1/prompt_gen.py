class PromptGenerator(object):
    def __init__(self):
        """
        Setup generation parameters for Gemma.
        """
        self.output_len = 100
        self.temperature = 0.0
        self.top_p = 0.0
        self.example_sample = {
                                "question":"Who was the opponent when the date was August 11, 1973?",
                                "table":{
                                    "cols":["Week","Date","Opponent","Result","Attendance"],
                                    "rows":[
                                        ["1","August 6, 1973","San Francisco 49ers","L 27\u201316","65,707"],
                                        ["2","August 11, 1973","at Los Angeles Rams","T 21\u201321","54,385"],
                                        ["3","August 19, 1973","vs. Cincinnati Bengals at Columbus, Ohio","W 24\u20136","73,421"],
                                        ["4","August 25, 1973","vs. Atlanta Falcons at Knoxville","W 20\u201317","40,831"],
                                        ["5","September 1, 1973","Detroit Lions","L 16\u201313","64,088"],
                                        ["6","September 8, 1973","vs. New York Giants at Akron","L 21\u201310","30,751"]
                                    ],
                                    "types":["real","text","text","text","real"],
                                    "caption":"Exhibition schedule"
                                }
                            }
        self.cols = []

    def create_prompt(self, sample):
        """
        Input sample is a dictionary consisting of following fields
        'table': A dict containing table data and meta-data same as in Assignment 2
        'question': A python string for the question on the table.
        
        The function must return the prompt as a python string.
        """
        # Example prompt
        prompt = """Read the following table and answer the related question.\n\n"""
        prompt += 'TABLE:\n'
        prompt +="Column Names:" + "\"Row Number\"" +","+  ','.join(
            [f'"{cc}"' for cc in sample['table']['cols']]
        ) + '\n'
        prompt += 'Rows: \n'
        for i,row in enumerate(sample['table']['rows']):
            prompt += str(i)+','+','.join(
                [f'"{rr}"' for rr in row]
            ) + '\n'
        prompt += '\n'
        prompt += 'QUESTION: ' + sample['question'] + '\n'
        prompt += 'Fill in the blanks: \n'
        prompt += 'Column name containing the answer: <blank>' + '\n'
        prompt += 'Row number containing the answer: <blank>' + '\n'
        self.cols = sample['table']['cols']
        return prompt
    
    def post_process(self, gen_text):
        """
        Input gen_text is a python string generated by Gemma for the prompt.
        
        The function must return a single python tuple (int, string)
        indicating the row and the column of the answer cell.
        """
        lines = gen_text.split('\n')
        column = -1
        row = -1
#         print(lines)
        for line in lines:
            if "Column name containing the answer:" in line:
                tokens = line.split(': ')
                column = tokens[-1]
                column = column.strip('\"')
                column = column.strip("** ")
            elif "The column name containing the answer" in line:
                tokens = line.split(': ')
                column = tokens[-1]
                column = column.strip('\"')
                column = column.strip("** ")
                
            if "Row number containing the answer:" in line:
                tokens = line.split(' ')
                row = tokens[-1]
                row = row.strip('\"')
                row = ''.join(filter(str.isdigit, row))
                if row.isdigit():
                    row = int(row)
            elif "The row number containing the answer" in line:
                tokens = line.split(' ')
                row = tokens[-1]
                row = row.strip('\"')
                row = ''.join(filter(str.isdigit, row))
                if row.isdigit():
                    row = int(row)
        if column == -1:
            column = self.cols[0]
        if row == -1:
            row = 0
        return [(row,column)]
    